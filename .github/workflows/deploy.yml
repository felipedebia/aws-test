name: Deploy to Elastic Beanstalk

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: aws_test_test
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential git libpq-dev libyaml-dev pkg-config

      - name: Run tests
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/aws_test_test
        run: |
          # Esperar a que PostgreSQL esté listo
          sleep 10
          bin/rails db:test:prepare test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: aws-test
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Crear repositorio ECR si no existe
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region ${{ secrets.AWS_REGION }} || \
          aws ecr create-repository --repository-name $ECR_REPOSITORY --region ${{ secrets.AWS_REGION }}
          
          # Build y push de la imagen para ARM64 con cache
          docker buildx build --platform linux/arm64 \
            -f Dockerfile.build \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            --push .

      - name: Deploy to Elastic Beanstalk
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: aws-test
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Crear archivo Dockerrun.aws.json para EB
          cat > Dockerrun.aws.json << EOF
          {
            "AWSEBDockerrunVersion": "1",
            "Image": {
              "Name": "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG",
              "Update": "true"
            },
            "Ports": [
              {
                "ContainerPort": "80"
              }
            ],
            "Environment": [
              {
                "Name": "RAILS_ENV",
                "Value": "production"
              },
              {
                "Name": "RAILS_MASTER_KEY",
                "Value": "${{ secrets.RAILS_MASTER_KEY }}"
              },
              {
                "Name": "SECRET_KEY_BASE",
                "Value": "${{ secrets.SECRET_KEY_BASE }}"
              }
            ]
          }
          EOF
          
          # Crear aplicación EB si no existe
          aws elasticbeanstalk describe-applications --application-names aws-test --region ${{ secrets.AWS_REGION }} || \
          aws elasticbeanstalk create-application --application-name aws-test --region ${{ secrets.AWS_REGION }}
          
          # Subir Dockerrun.aws.json a S3 primero
          aws s3 cp Dockerrun.aws.json s3://elasticbeanstalk-${{ secrets.AWS_REGION }}-${{ secrets.AWS_ACCOUNT_ID }}/aws-test-${{ github.sha }}.zip
          
          # Crear versión de aplicación con Dockerrun.aws.json
          aws elasticbeanstalk create-application-version \
            --application-name aws-test \
            --version-label ${{ github.sha }} \
            --source-bundle S3Bucket=elasticbeanstalk-${{ secrets.AWS_REGION }}-${{ secrets.AWS_ACCOUNT_ID }},S3Key=aws-test-${{ github.sha }}.zip \
            --region ${{ secrets.AWS_REGION }}
          
          # Actualizar entorno EB
          aws elasticbeanstalk update-environment \
            --environment-name Aws-test-env \
            --version-label ${{ github.sha }} \
            --region ${{ secrets.AWS_REGION }}
